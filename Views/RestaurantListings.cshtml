@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage<IPublishedContent>
@using Umbraco.Cms.Core.Models.PublishedContent
@using Umbraco.Extensions
@using System.Text.RegularExpressions

@{
    Layout = "master.cshtml";

    var current = Model;  

    var restaurantListings = Umbraco.ContentAtRoot()
        .First(x => x.ContentType.Alias == "restaurantListings");

    var restaurants = restaurantListings.DescendantsOfType("restaurantPage")
        .ToArray();

    var searchTerm = (Context.Request.Query["searchTerm"].FirstOrDefault() ?? "").Trim();

    // If exact match on restaurant name, redirect
    var exactMatch = restaurants.FirstOrDefault(r =>
        (r.Value<string>("restaurantName") ?? "").Equals(searchTerm, StringComparison.OrdinalIgnoreCase));

    if (exactMatch != null)
    {
        Context.Response.Redirect(exactMatch.Url());
        return;
    }

    var itemsToRender = string.IsNullOrWhiteSpace(searchTerm)
        ? restaurants
        : restaurants.Where(r =>
            // Match restaurant name
            (r.Value<string>("restaurantName") ?? "")
                .Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
            ||
            // Match category name
            (r.Value<IEnumerable<IPublishedContent>>("category") ?? Enumerable.Empty<IPublishedContent>())
            .Any(c => c.Name.Equals(searchTerm, StringComparison.OrdinalIgnoreCase))
            ||
            // Match occasion/tags (replace "occasion" with actual alias if needed)
            (r.Value<IEnumerable<IPublishedContent>>("occasion") ?? Enumerable.Empty<IPublishedContent>())
                .Any(o => o.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
        ).ToArray();

    var byCategory = itemsToRender
        .SelectMany(r => r.Value<IEnumerable<IPublishedContent>>("category") ?? Enumerable.Empty<IPublishedContent>(),
                    (r, cat) => new { Restaurant = r, Category = cat })
        .GroupBy(x => x.Category.Name)
        .ToArray();
}

<section class="container my-5">
    <h1 class="text-center">
        @(!string.IsNullOrWhiteSpace(searchTerm) ? "Search results for: " + searchTerm : "Restaurants")
    </h1>

    @if (!byCategory.Any())
    {
       <div class="no-results" style="margin:2rem 0; padding:1rem; text-align:center;">
            <p>No restaurants found for “<strong>@searchTerm</strong>”.</p>
            <p><a href="@restaurantListings.Url()" style="color: #3b5998; text-decoration: none;">← View all restaurants</a></p>
        </div>
    }

    @foreach (var grp in byCategory)
    {
        var cat = grp.First().Category;
        var catName = cat?.Name ?? "Uncategorized";
        var carouselId = $"carousel-{catName.Replace(" ", "").ToLower()}";

        <section class="my-5">
            <h3 class="mb-2" style="text-align: center">@catName</h3>

            <div id="@carouselId"
                 class="carousel slide"
                 data-bs-ride="carousel"
                 data-bs-interval="4500">

                <div class="carousel-inner">
                    @{
                        int itemsPerSlide = 3;
                        var total = grp.Count();
                        int slideIndex = 0;

                        while (slideIndex < total)
                        {
                            var items = grp.Skip(slideIndex).Take(itemsPerSlide).ToList();
                            var isActive = (slideIndex == 0) ? "active" : "";

                            <div class="carousel-item @isActive">
                                <div class="d-flex justify-content-center gap-5 px-5">
                                    @foreach (var entry in items)
                                    {
                                        var page = entry.Restaurant;
                                        var name = page.Value<string>("restaurantName");
                                        var desc = page.Value<string>("description");
                                        var img = page.Value<IPublishedContent>("image")?.Url();
                                        var url = page.Url();
                                        var rating = page.Value<int?>("rating") ?? 0;

                                        <div class="card text-center d-flex flex-column align-items-center" style="width: 18rem;">
                                            <img src="@img" class="card-img-top" alt="@name" style="height: 180px; object-fit: cover;" />

                                            <div class="card-body d-flex flex-column justify-content-center align-items-start text-start flex-grow-1 w-100">
                                                <div class="d-flex justify-content-between align-items-center w-100 mb-2">
                                                    <h5 class="card-title fw-bold mb-0">@name</h5>
                                                    <div class="rating d-flex align-items-center">
                                                        @for (int star = 1; star <= 5; star++)
                                                        {
                                                            var isFilled = star <= rating;
                                                            var starCss = isFilled ? "bi-star-fill" : "bi-star";
                                                            var colorStyle = isFilled ? "color: #3b5998;" : "color: #ccc;";
                                                            var sizeStyle = "font-size: 0.85rem;"; // adjust size as needed

                                                            <i class="bi @starCss" style="@($"{colorStyle} {sizeStyle}")"></i>
                                                        }
                                                    </div>
                                                </div>

                                                <p class="card-text text-muted small mb-3" style="display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; overflow: hidden;">
                                                    @desc
                                                </p>

                                                <div class="d-flex justify-content-center w-100 mt-auto">
                                                    <a href="@url" class="btn btn-primary" style="background-color: #3b5998; border: 2px solid #3b5998;">
                                                        View →
                                                    </a>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>

                            slideIndex += itemsPerSlide;
                        }
                    }
                </div>

                @if (grp.Count() > itemsPerSlide)
                {
                    <button class="carousel-control-next"
                        type="button"
                        data-bs-target="#@carouselId"
                        data-bs-slide="next">
                        <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" fill="#3b5998" viewBox="0 0 16 16">
                            <path fill-rule="evenodd" d="M6.646 14.354a.5.5 0 0 1-.708-.708L11.293 8 5.938 2.354a.5.5 0 1 1 .707-.708l5.647 5.647a.5.5 0 0 1 0 .708l-5.646 5.647z"/>
                        </svg>
                        <span class="visually-hidden">Next</span>
                    </button>

                    <button class="carousel-control-prev"
                        type="button"
                        data-bs-target="#@carouselId"
                        data-bs-slide="prev">
                        <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" fill="#3b5998" viewBox="0 0 16 16">
                            <path fill-rule="evenodd" d="M9.354 1.646a.5.5 0 0 1 0 .708L3.707 8l5.647 5.646a.5.5 0 0 1-.708.708L2.646 8.354a.5.5 0 0 1 0-.708L8.646 1.646a.5.5 0 0 1 .708 0z"/>
                        </svg>
                        <span class="visually-hidden">Previous</span>
                    </button>
                }
            </div>
        </section>
    }
</section>

@section Scripts {
  <script>
    document.addEventListener("DOMContentLoaded", function () {
      const params = new URLSearchParams(window.location.search);
      if (params.has("searchTerm")) {
        const input = document.querySelector('input[name="searchTerm"]');
        if (input) input.value = "";
        params.delete("searchTerm");
        const newQuery = params.toString();
        const newUrl = window.location.origin + window.location.pathname + (newQuery ? "?" + newQuery : "");
        window.history.replaceState({}, "", newUrl);
      }
    });
  </script>
}
